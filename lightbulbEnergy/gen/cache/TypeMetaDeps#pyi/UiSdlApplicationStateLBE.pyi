#!/usr/bin/env python3
from typing import Callable, Any, Literal, Union, Generic, TypeVar, Optional, overload
from datetime import datetime
from c3.platform.Include import Include
from c3.platform.FieldPath import FieldPath
from c3.platform.StreamType import StreamType
from c3.uiInfrastructure.UiSdlReduxState import UiSdlReduxState
from c3.uiInfrastructure.UiSdlImmutableJS import UiSdlImmutableJS
from c3.platform.ArrayBuilder import ArrayBuilder
from c3.platform.ReferenceType import ReferenceType
from c3.platform.ArrayType import ArrayType
from c3.platform.WithKey import WithKey
from c3.platform.ValidateObjSpec import ValidateObjSpec
from c3.uiInfrastructure.UiSdlEffectTrigger import UiSdlEffectTrigger
from c3.platform.FieldType import FieldType
from c3.platform.ValidateObjResult import ValidateObjResult
from c3.platform.SetBuilder import SetBuilder
from c3.platform.Type import Type
from c3.platform.Promise import Promise
from c3.platform.Obj import Obj
from c3.platform.SetBuilder import SetBuilder
from c3.platform.ValueType import ValueType
from c3.platform.ValueSpec import ValueSpec
from c3.platform.Data import Data
from c3.platform.ObjBuilder import ObjBuilder
from c3.uiInfrastructure.UiSdlApplicationStateDataModifyAction import UiSdlApplicationStateDataModifyAction
from c3.platform.SetBuilder import SetBuilder
from c3.platform.Expr.CompileOptions import Expr.CompileOptions
from c3.uiInfrastructure.UiSdlApplicationStateDataAddAction import UiSdlApplicationStateDataAddAction
from c3.uiInfrastructure.UiSdlReduxAction import UiSdlReduxAction
from c3.platform.Promise import Promise
from c3.platform.FieldValue import FieldValue
from c3.platform.MapBuilder import MapBuilder
from c3.platform.MapBuilder import MapBuilder
from c3.platform.SetType import SetType
from c3.uiInfrastructure.UiSdlImmutableJS import UiSdlImmutableJS
from c3.platform.MapType import MapType
from c3.uiInfrastructure.UiSdlApplicationStateDataDeleteAction import UiSdlApplicationStateDataDeleteAction
from c3.platform.Exclude import Exclude
from c3.uiInfrastructure.UiSdlApplicationStateInitializeAction import UiSdlApplicationStateInitializeAction

# Python definitions for the C3 type UiSdlApplicationStateLBE


class UiSdlApplicationStateLBE(UiSdlApplicationState):
    """
    @remarks this represents a made instance of UiSdlApplicationStateLBE
    """
    
    id: Optional[str]=None
    """
    The id of this instance.
    """

    REDUX_NAMESPACE: Optional[str]=None
    """
    The Redux namespace for the application state to indicate where the application data is stored in the Redux state.
    """

    effectTriggers: Optional[Array[UiSdlEffectTrigger]]=None
    """
    Collection of extra async {@link UiSdlEffectTrigger}.
    """
    def __init__(self, id: Optional[str]=None, REDUX_NAMESPACE: Optional[str]=None, effectTriggers: Optional[Array[UiSdlEffectTrigger]]=None) -> None: ...

    @classmethod
    def getStateNamespace(cls) -> Union[str]:
        ...
    @classmethod
    def getInitialStateNamespace(cls) -> Union[str]:
        ...
    @classmethod
    def getConfigStatePath(cls, id: str=None) -> Union[Array[str]]:
        ...
    @classmethod
    def getInitialConfigStatePath(cls, id: str=None) -> Union[Array[str]]:
        ...
    @classmethod
    def getConfigFromState(cls, id: str=None, state: UiSdlReduxState=None, dataPath: Array[str]=None) -> Union[UiSdlImmutableJS[Any]]:
        ...
    @classmethod
    def setConfigInState(cls, id: str=None, state: UiSdlReduxState=None, dataPath: Array[str]=None, value: Any=None) -> Union[UiSdlImmutableJS[Any]]:
        ...
    @classmethod
    def getInitialConfigFromState(cls, id: str=None, state: UiSdlReduxState=None, dataPath: Array[str]=None) -> Union[UiSdlImmutableJS[Any]]:
        ...
    @classmethod
    def setInitialConfigInState(cls, id: str=None, state: UiSdlReduxState=None, dataPath: Array[str]=None, value: Any=None) -> Union[UiSdlImmutableJS[Any]]:
        ...
    @classmethod
    def isLimitEffectOnState(cls) -> bool:
        ...
    @overload
    def toJson(self) -> any:
        ...
    @overload
    def toJson(self, include: str=None, exclude: str=None) -> any:
        ...
    @overload
    def toJson(self, include: Include=None, exclude: Exclude=None) -> any:
        ...
    @overload
    def toTypedJson(self, omitTopLevelType: bool=None, actionRequirement: str=None) -> any:
        ...
    @overload
    def toTypedJson(self, include: str=None, exclude: str=None) -> any:
        ...
    @overload
    def toTypedJson(self, include: Include=None, exclude: Exclude=None) -> any:
        ...
    @overload
    def toJsonString(self) -> str:
        ...
    @overload
    def toJsonString(self, pretty: bool) -> str:
        ...
    @overload
    def toTypedJsonString(self) -> str:
        ...
    @overload
    def toTypedJsonString(self, pretty: bool=None, omitTopLevelType: bool=None) -> str:
        ...
    @overload
    def toJsString(self) -> str:
        ...
    @overload
    def toJsString(self, withType: bool) -> str:
        ...
    @overload
    def toXmlString(self) -> str:
        ...
    @overload
    def toXmlString(self, withType: bool) -> str:
        ...
    def serialize(self, contentType: str) -> Union[str]:
        ...
    @classmethod
    def fromJson(cls, json: any) -> Union[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def fromJsonString(cls, json: str) -> Union[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def fromXmlString(cls, xml: str) -> Union[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def deserialize(cls, contentStr: str, contentType: str) -> Union[UiSdlApplicationStateLBE]:
        ...
    def fingerprint(self, allIdentifiedRefFields: bool=None, trackRecursiveRefs: bool=None, traversedRefs: SetBuilder[Obj]=None) -> int:
        ...
    def retainedMemory(self, deep: bool=None, allMeasured: SetBuilder[Any]=None) -> int:
        ...
    def type(self) -> Type:
        ...
    def replaceType(self, old: Type, new: Type) -> UiSdlApplicationStateLBE:
        ...
    def super(self, mixin: Type=None) -> Any:
        ...
    @overload
    def instanceOf(self, typeName: str) -> bool:
        ...
    @overload
    def instanceOf(self, type: Type) -> bool:
        ...
    def isEmptyObj(self) -> bool:
        ...
    def isSame(self, other: Obj) -> bool:
        ...
    @overload
    def fieldValue(self, field: str, defaultToEmpty: bool=None) -> Union[T]:
        ...
    @overload
    def fieldValue(self, field: FieldType, defaultToEmpty: bool=None) -> Union[T]:
        ...
    def fieldValues(self) -> Union[Array[FieldValue]]:
        ...
    def fieldValuesByOrdinal(self, skipTrailingEmpty: bool=None) -> Union[Array[Any]]:
        ...
    def fieldValuesByFieldType(self) -> Union[Map[FieldType, Any]]:
        ...
    def fieldValuesByFieldName(self) -> Union[Map[str, Any]]:
        ...
    def fieldNames(self) -> Union[Array[str]]:
        ...
    @overload
    def at(self, ordinal: int) -> Union[T]:
        ...
    @overload
    def at(self, expr: str, failIfNotValid: bool=None) -> Union[T]:
        ...
    def fieldValueAtPath(self, fieldPath: str, failIfNotFound: bool=None, context: Callable[[], Union[str]]=None) -> Union[T]:
        ...
    def fieldValuesAtPath(self, fieldPath: str, failIfNotFound: bool=None, context: Callable[[], Union[str]]=None) -> Union[Array[T]]:
        ...
    @overload
    def eachFieldValue(self, action: Callable[[FieldType, Any]]) -> None:
        ...
    @overload
    def eachFieldValue(self, spec: ValueSpec, action: Callable[[FieldType, Any]]) -> None:
        ...
    def eachFieldValueWhile(self, spec: ValueSpec, action: Callable[[FieldType, Any], bool]) -> bool:
        ...
    @overload
    def eachRef(self, action: Callable[[FieldType, Obj]]) -> None:
        ...
    @overload
    def eachRef(self, includeEmpty: bool, action: Callable[[FieldType, Obj]]) -> None:
        ...
    def eachRefWhile(self, includeEmpty: bool, action: Callable[[FieldType, Obj], bool]) -> bool:
        ...
    def eachRefRecursive(self, includeEmpty: bool, action: Callable[[FieldPath, Obj]]) -> None:
        ...
    def eachRefRecursiveWhile(self, includeEmpty: bool, action: Callable[[FieldPath, Obj], bool]) -> bool:
        ...
    @overload
    def mapFieldValues(self, mapper: Callable[[FieldType, Any], Union[Any]], convertValue: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mapFieldValues(self, spec: ValueSpec, mapper: Callable[[FieldType, Any], Union[Any]], convertValue: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mapFieldValuesAsync(self, mapper: Callable[[FieldType, Any], Union[Promise[Any]]], convertValue: bool=None) -> Promise[UiSdlApplicationStateLBE]:
        ...
    @overload
    def mapFieldValuesAsync(self, spec: ValueSpec, mapper: Callable[[Union[FieldType], Any], Union[Promise[Any]]], convertValue: bool=None) -> Promise[UiSdlApplicationStateLBE]:
        ...
    def mapFieldValue(self, mapper: Callable[[Any], Union[Any]], field: FieldType=None, includeEmpty: bool=None, convertValue: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mapRefs(self, mapper: Callable[[FieldType, Obj], Union[Obj]], convertValue: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mapRefs(self, includeEmpty: bool, mapper: Callable[[FieldType, Obj], Union[Obj]], convertValue: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def foldFieldValues(self, folder: Callable[[FieldType, Any, Union[T]], Union[T]]) -> Union[T]:
        ...
    @overload
    def foldFieldValues(self, folder: Callable[[FieldType, Any, Union[T]], Union[T]], initial: T=None) -> Union[T]:
        ...
    @overload
    def foldFieldValues(self, spec: ValueSpec, folder: Callable[[FieldType, Any, Union[T]], Union[T]], initial: T=None) -> Union[T]:
        ...
    @overload
    def evalProjection(self, projection: str, resultType: ValueType=None, bindings: Map[str, Any]=None, options: Expr.CompileOptions=None) -> Union[Any]:
        ...
    @overload
    def evalProjection(self, projection: any, bindings: Map[str, Any]=None, options: Expr.CompileOptions=None) -> Union[any]:
        ...
    @overload
    def evalProjection(self, projection: any, resultType: Type, bindings: Map[str, Any]=None, options: Expr.CompileOptions=None) -> Union[Obj]:
        ...
    @overload
    def validateObj(self) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def validateObj(self, spec: ValidateObjSpec) -> ValidateObjResult:
        ...
    @overload
    def withField(self, field: str, value: Any, doNotConvert: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def withField(self, field: FieldType, value: Any, doNotConvert: bool=None) -> UiSdlApplicationStateLBE:
        ...
    def withFields(self, fields: Map[str, Any], doNotConvert: bool=None) -> UiSdlApplicationStateLBE:
        ...
    def withFieldAtPath(self, path: str, value: Any, doNotConvert: bool=None, doNotCreateIfMissing: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def withoutField(self, field: str) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def withoutField(self, field: FieldType) -> UiSdlApplicationStateLBE:
        ...
    def withoutFields(self, fields: Array[str]) -> UiSdlApplicationStateLBE:
        ...
    def withoutFieldsByType(self, fields: Array[FieldType]) -> UiSdlApplicationStateLBE:
        ...
    def withDefaults(self, includeEmptyRefsWithDefaults: bool=None, defaultFields: Array[str]=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mergeObj(self, other: Obj) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mergeObj(self, other: Obj, otherFieldsFilter: Type) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mergeObj(self, other: Obj, merger: Callable[[Union[FieldPath], Union[Any], Union[FieldPath], Union[Any]], Union[Any]], deep: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    def mergeObj(self, other: Obj, merger: Callable[[Union[FieldType], Union[Any], Union[FieldType], Union[Any]], Union[Any]]) -> UiSdlApplicationStateLBE:
        ...
    def mergeAndExpandObj(self, other: Obj, merger: Callable[[Union[FieldType], Union[Any], Union[FieldType], Union[Any]], Union[Any]]) -> Union[R]:
        ...
    def mergeJson(self, json: any) -> UiSdlApplicationStateLBE:
        ...
    def mergeChildren(self, deep: bool=None, objKey: Callable[[Union[Obj]], Union[Any]]=None, filter: Callable[[str], bool]=None) -> UiSdlApplicationStateLBE:
        ...
    def sumObj(self, other: Obj, deep: bool=None) -> UiSdlApplicationStateLBE:
        ...
    def singletonArray(self) -> Array[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def array(cls, *elements: Array[Any]) -> Union[Array[UiSdlApplicationStateLBE]]:
        ...
    @classmethod
    def arrayBuilder(cls) -> Union[ArrayBuilder[UiSdlApplicationStateLBE]]:
        ...
    def singletonSet(self) -> Set[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def setBuilder(cls) -> Union[SetBuilder[UiSdlApplicationStateLBE]]:
        ...
    @classmethod
    def mapBuilder(cls) -> Union[MapBuilder[str, UiSdlApplicationStateLBE]]:
        ...
    @classmethod
    def mapBuilderOf(cls, keyType: ValueType) -> Union[MapBuilder[Any, UiSdlApplicationStateLBE]]:
        ...
    @classmethod
    def myReferenceType(cls) -> ReferenceType:
        ...
    @classmethod
    def myMapTypeOf(cls, keyType: ValueType) -> MapType:
        ...
    @classmethod
    def myMapType(cls) -> MapType:
        ...
    @classmethod
    def myArrayType(cls) -> ArrayType:
        ...
    @classmethod
    def mySetType(cls) -> SetType:
        ...
    @classmethod
    def myStreamType(cls) -> StreamType:
        ...
    def toBuilder(self) -> ObjBuilder[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def builder(cls) -> ObjBuilder[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def fromFields(cls, fields: Map[FieldType, Union[Any,Any]], withDefaults: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    @classmethod
    def make(cls, withDefaults: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    @classmethod
    def make(cls, fields: Map[str, Union[Any,Any]], withDefaults: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    @classmethod
    def make(cls, fields: Any, withDefaults: bool=None) -> UiSdlApplicationStateLBE:
        ...
    @overload
    @classmethod
    def make(cls, s: str) -> Union[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def remake(cls, other: Obj, failIfExtraOrInvalidFields: bool=None) -> UiSdlApplicationStateLBE:
        ...
    def remakeAs(self, type: Type) -> O:
        ...
    @classmethod
    def beforeMake(cls, fields: Map[FieldType, Any]) -> Union[Map[FieldType, Any]]:
        ...
    def afterMake(self) -> UiSdlApplicationStateLBE:
        ...
    @classmethod
    def cachedEmptyInst(cls) -> UiSdlApplicationStateLBE:
        ...
    def toData(self) -> Union[Data]:
        ...
    @classmethod
    def keyFieldType(cls) -> FieldType:
        ...
    def keyFieldValue(self) -> Union[str]:
        ...
    def singletonMap(self) -> Map[str, WithKey]:
        ...
    def toString(self) -> Union[str]:
        ...
    @classmethod
    def fromString(cls, s: str) -> Union[UiSdlApplicationStateLBE]:
        ...
    @classmethod
    def getConfigFromApplicationState(cls, stateId: str, state: UiSdlReduxState, dataPath: Array[str]=None) -> UiSdlReduxState:
        ...
    @classmethod
    def setConfigInApplicationState(cls, stateId: str, state: UiSdlReduxState, value: Any, dataPath: Array[str]=None) -> UiSdlReduxState:
        ...
    @classmethod
    def removeConfigInApplicationState(cls, stateId: str, state: UiSdlReduxState, dataPath: Array[str]=None) -> UiSdlReduxState:
        ...
    @classmethod
    def initializeApplicationStateAction(cls, stateId: str) -> UiSdlApplicationStateInitializeAction:
        ...
    @classmethod
    def applicationStateDeleteDataAction(cls, stateId: str, ids: Array[str]=None, dataPath: str=None) -> UiSdlApplicationStateDataDeleteAction:
        ...
    @classmethod
    def applicationStateAddDataAction(cls, stateId: str, id: str=None, dataPath: str=None) -> UiSdlApplicationStateDataAddAction:
        ...
    @classmethod
    def applicationStateModifyDataAction(cls, stateId: str, id: str=None, dataPath: str=None, field: str=None, newValue: Any=None) -> UiSdlApplicationStateDataModifyAction:
        ...
    @classmethod
    def applicationStateDataDeleteEffect(cls, state: UiSdlReduxState, action: UiSdlApplicationStateDataDeleteAction) -> UiSdlReduxState:
        ...
    @classmethod
    def applicationStateDataAddEffect(cls, state: UiSdlReduxState, action: UiSdlApplicationStateDataAddAction) -> UiSdlReduxState:
        ...
    @classmethod
    def applicationStateDataModifyEffect(cls, state: UiSdlReduxState, action: UiSdlApplicationStateDataModifyAction) -> UiSdlReduxState:
        ...
    @classmethod
    def generateSelector(cls, applicationId: str=None) -> Union[Callable[[Union[UiSdlReduxState]], Union[UiSdlImmutableJS[UiSdlApplicationState]]]]:
        ...
    @classmethod
    def rowRecordStoreReducer(cls, state: UiSdlReduxState, action: UiSdlReduxAction[Any]=None) -> Union[UiSdlReduxState]:
        ...
    @classmethod
    def storeRowRecordAction(cls, id: str=None, obj: any=None) -> Union[UiSdlReduxAction[Any]]:
        ...
    @classmethod
    def aptIdStoreReducer(cls, state: UiSdlReduxState, action: UiSdlReduxAction[Any]=None) -> Union[UiSdlReduxState]:
        ...
    @classmethod
    def storeAptIdAction(cls, id: str=None, obj: any=None) -> Union[UiSdlReduxAction[Any]]:
        ...
    @classmethod
    def bldIdStoreReducer(cls, state: UiSdlReduxState, action: UiSdlReduxAction[Any]=None) -> Union[UiSdlReduxState]:
        ...
    @classmethod
    def storeBldIdAction(cls, id: str=None, obj: any=None) -> Union[UiSdlReduxAction[Any]]:
        ...

